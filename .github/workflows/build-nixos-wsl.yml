name: Build NixOS-WSL installer
run-name: ${{ github.actor }} is build and packaging NixOS-WSL üöÄ
# write a code about action workflow be trigger by manual other than push.
#on: [push]
on:
  workflow_call: {}

jobs:
  prepare:
    name: Prepare üöÄ
    runs-on: ubuntu-latest
    outputs:
      #tests: ${{ steps.tests.outputs.tests }}
      #checks: ${{ steps.checks.outputs.checks }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install nix ‚ùÑÔ∏è
        uses: cachix/install-nix-action@v22
        with:
          extra_nix_config: 'access-tokens = github.com=${{ github.token }}'

      - name: Generate Version üè∑Ô∏è
        id: version
        run: |
          TAG_COUNT=$(git rev-list --tags --no-walk --count)                                                                 # Count all tags
          COMMIT_COUNT=$(git rev-list --use-bitmap-index --count $(git rev-list --tags --no-walk --max-count=1)..HEAD)       # Count all commits since the last tag
          NIXOS_VERSION=$(nix-instantiate --eval -E '(import ./.).inputs.nixpkgs.lib.version' | sed -E 's/"(.+\...).*"/\1/') # Get NixOS version from nixpkgs
          NIXOS_VERSION_MS=$(echo $NIXOS_VERSION | sed -E 's/\.0*(.+)/\.\1/')                                                # Remove the leading 0 from the minor version (if it exists)
          NIXOS_WSL_VERSION=${NIXOS_VERSION_MS}.${TAG_COUNT}.${COMMIT_COUNT}                                                 # Compose the NixOS-WSL version number
          echo "version=$NIXOS_WSL_VERSION" >> $GITHUB_OUTPUT

  build:
    name: Build üõ†Ô∏è

    needs:
      - prepare

    permissions:
      # Give the default GITHUB_TOKEN write permission to commit and push the changed files back to the repository.
      contents: write

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install nix ‚ùÑÔ∏è
        # uses: cachix/install-nix-action@v22
        # with:
        #   extra_nix_config: 'access-tokens = github.com=${{ github.token }}'

        uses: nixbuild/nix-quick-install-action@v25
        with:
          nix_conf: |
            substituters = https://cache.nixos.org/ https://nix-community.cachix.org
            trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs=
            keep-outputs = true

      - name: Set version üè∑Ô∏è
        run: |
          echo ${{ needs.prepare.outputs.version }} > ./VERSION
          echo $(git rev-parse HEAD) >> ./VERSION

      - name: Update flake.lock üßæ
        run: |
          rm flake.lock && nix flake lock

      # - name: Restore and cache Nix store
      #   if: ${{ matrix.do-cache }}
      #   uses: ./.
      #   with:
      #     gc-enabled-linux: true
      #     gc-max-store-size-linux: 8000000000
      #     gc-enabled-macos: true
      #     gc-max-store-size-macos: 8000000000
          
      #     purge-enabled: true
      #     purge-max-age: 86400
      #     purge-by-created-time: true
      #     purge-by-accessed-time: true
          
      #     # output debug info
      #     debug: true
          
      #     # save a new cache every time ci file changes
      #     key: cache-${{ matrix.os }}-${{ hashFiles('.github/workflows/ci.yaml') }}
      #     restore-keys: |
      #       cache-${{ matrix.os }}-${{ hashFiles('.github/workflows/ci.yaml') }}-
      #       cache-${{ matrix.os }}-

      - name: Build installer üõ†Ô∏è
        run: |
          nix build '.#nixosConfigurations.wsl.config.system.build.installer'

      - name: Upload installer üì§
        uses: actions/upload-artifact@v3
        with:
          name: installer
          path: result/tarball/nixos-wsl-installer.tar.gz

      - uses: stefanzweifel/git-auto-commit-action@v4.16.0
        if: ${{ success() }}
        with:
          commit_message: 'automation: update flake.lock'
          file_pattern: 'flake.lock'
